"use strict";(self.webpackChunktodo_list=self.webpackChunktodo_list||[]).push([[179],{947:()=>{function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){return e(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function n(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function r(r){if(e(1,arguments),!t(r)&&"number"!=typeof r)return!1;var a=n(r);return!isNaN(Number(a))}var a={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function o(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}var i,s={date:o({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:o({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:o({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},c={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function d(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var s=e.defaultWidth,c=a.width?String(a.width):e.defaultWidth;r=e.values[c]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function u(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,s=o[0],c=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(c)?m(c,(function(e){return e.test(s)})):l(c,(function(e){return e.test(s)}));i=e.valueCallback?e.valueCallback(d):d,i=n.valueCallback?n.valueCallback(i):i;var u=t.slice(s.length);return{value:i,rest:u}}}function l(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function m(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const h={code:"en-US",formatDistance:function(e,t,n){var r,o=a[e];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:s,formatRelative:function(e,t,n,r){return c[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:d({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:d({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:d({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:d({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:d({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(i={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(i.matchPattern);if(!n)return null;var r=n[0],a=e.match(i.parsePattern);if(!a)return null;var o=i.valueCallback?i.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var s=e.slice(r.length);return{value:o,rest:s}}),era:u({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:u({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:u({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:u({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:u({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function f(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function g(t,r){e(2,arguments);var a=n(t).getTime(),o=f(r);return new Date(a+o)}function p(t,n){e(2,arguments);var r=f(n);return g(t,-r)}var v=864e5;function w(t){e(1,arguments);var r=1,a=n(t),o=a.getUTCDay(),i=(o<r?7:0)+o-r;return a.setUTCDate(a.getUTCDate()-i),a.setUTCHours(0,0,0,0),a}function y(t){e(1,arguments);var r=n(t),a=r.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(a+1,0,4),o.setUTCHours(0,0,0,0);var i=w(o),s=new Date(0);s.setUTCFullYear(a,0,4),s.setUTCHours(0,0,0,0);var c=w(s);return r.getTime()>=i.getTime()?a+1:r.getTime()>=c.getTime()?a:a-1}function b(t){e(1,arguments);var n=y(t),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var a=w(r);return a}var T=6048e5;function q(t,r){e(1,arguments);var a=r||{},o=a.locale,i=o&&o.options&&o.options.weekStartsOn,s=null==i?0:f(i),c=null==a.weekStartsOn?s:f(a.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=n(t),u=d.getUTCDay(),l=(u<c?7:0)+u-c;return d.setUTCDate(d.getUTCDate()-l),d.setUTCHours(0,0,0,0),d}function x(t,r){e(1,arguments);var a=n(t),o=a.getUTCFullYear(),i=r||{},s=i.locale,c=s&&s.options&&s.options.firstWeekContainsDate,d=null==c?1:f(c),u=null==i.firstWeekContainsDate?d:f(i.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(o+1,0,u),l.setUTCHours(0,0,0,0);var m=q(l,r),h=new Date(0);h.setUTCFullYear(o,0,u),h.setUTCHours(0,0,0,0);var g=q(h,r);return a.getTime()>=m.getTime()?o+1:a.getTime()>=g.getTime()?o:o-1}function C(t,n){e(1,arguments);var r=n||{},a=r.locale,o=a&&a.options&&a.options.firstWeekContainsDate,i=null==o?1:f(o),s=null==r.firstWeekContainsDate?i:f(r.firstWeekContainsDate),c=x(t,n),d=new Date(0);d.setUTCFullYear(c,0,s),d.setUTCHours(0,0,0,0);var u=q(d,n);return u}var S=6048e5;function k(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const M=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return k("yy"===t?r%100:r,t.length)},D=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):k(n+1,2)},L=function(e,t){return k(e.getUTCDate(),t.length)},E=function(e,t){return k(e.getUTCHours()%12||12,t.length)},P=function(e,t){return k(e.getUTCHours(),t.length)},U=function(e,t){return k(e.getUTCMinutes(),t.length)},j=function(e,t){return k(e.getUTCSeconds(),t.length)},A=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return k(Math.floor(r*Math.pow(10,n-3)),t.length)};function N(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+k(o,2)}function W(e,t){return e%60==0?(e>0?"-":"+")+k(Math.abs(e)/60,2):Y(e,t)}function Y(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+k(Math.floor(a/60),2)+n+k(a%60,2)}const Q={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return M(e,t)},Y:function(e,t,n,r){var a=x(e,r),o=a>0?a:1-a;return"YY"===t?k(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):k(o,t.length)},R:function(e,t){return k(y(e),t.length)},u:function(e,t){return k(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return k(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return k(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return D(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return k(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,r,a,o){var i=function(t,r){e(1,arguments);var a=n(t),o=q(a,r).getTime()-C(a,r).getTime();return Math.round(o/S)+1}(t,o);return"wo"===r?a.ordinalNumber(i,{unit:"week"}):k(i,r.length)},I:function(t,r,a){var o=function(t){e(1,arguments);var r=n(t),a=w(r).getTime()-b(r).getTime();return Math.round(a/T)+1}(t);return"Io"===r?a.ordinalNumber(o,{unit:"week"}):k(o,r.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):L(e,t)},D:function(t,r,a){var o=function(t){e(1,arguments);var r=n(t),a=r.getTime();r.setUTCMonth(0,1),r.setUTCHours(0,0,0,0);var o=r.getTime(),i=a-o;return Math.floor(i/v)+1}(t);return"Do"===r?a.ordinalNumber(o,{unit:"dayOfYear"}):k(o,r.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return k(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return k(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return k(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return E(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):P(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):k(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):k(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):U(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):j(e,t)},S:function(e,t){return A(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return W(a);case"XXXX":case"XX":return Y(a);default:return Y(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return W(a);case"xxxx":case"xx":return Y(a);default:return Y(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+N(a,":");default:return"GMT"+Y(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+N(a,":");default:return"GMT"+Y(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return k(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return k((r._originalDate||e).getTime(),t.length)}};function O(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function H(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var F={p:H,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return O(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",O(a,t)).replace("{{time}}",H(o,t))}};const I=F;function z(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var G=["D","DD"],V=["YY","YYYY"];function B(e){return-1!==G.indexOf(e)}function R(e){return-1!==V.indexOf(e)}function X(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var Z=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,J=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,$=/^'([^]*?)'?$/,_=/''/g,K=/[a-zA-Z]/;function ee(t,a,o){e(2,arguments);var i=String(a),s=o||{},c=s.locale||h,d=c.options&&c.options.firstWeekContainsDate,u=null==d?1:f(d),l=null==s.firstWeekContainsDate?u:f(s.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=c.options&&c.options.weekStartsOn,g=null==m?0:f(m),v=null==s.weekStartsOn?g:f(s.weekStartsOn);if(!(v>=0&&v<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!c.localize)throw new RangeError("locale must contain localize property");if(!c.formatLong)throw new RangeError("locale must contain formatLong property");var w=n(t);if(!r(w))throw new RangeError("Invalid time value");var y=z(w),b=p(w,y),T={firstWeekContainsDate:l,weekStartsOn:v,locale:c,_originalDate:w},q=i.match(J).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,I[t])(e,c.formatLong,T):e})).join("").match(Z).map((function(e){if("''"===e)return"'";var n=e[0];if("'"===n)return te(e);var r=Q[n];if(r)return!s.useAdditionalWeekYearTokens&&R(e)&&X(e,a,t),!s.useAdditionalDayOfYearTokens&&B(e)&&X(e,a,t),r(b,e,c.localize,T);if(n.match(K))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");return e})).join("");return q}function te(e){return e.match($)[1].replace(_,"'")}function ne(t,r){e(2,arguments);var a=n(t),o=f(r);return isNaN(o)?new Date(NaN):o?(a.setDate(a.getDate()+o),a):a}const re="todolist.todos",ae=JSON.parse(localStorage.getItem(re))||[],oe=()=>{const e=document.querySelector(".main-container").getAttribute("data-id"),t=document.querySelector(".todo-container"),n=ie(e);t.textContent="",n.forEach((e=>ke(e))),localStorage.setItem(re,JSON.stringify(ae))},ie=t=>{const r=document.querySelector(".todo-sort"),a=ae.filter(((e,n)=>{switch(e.index=n,t){case"Today":return e.date===ee(new Date,"yyyy-MM-dd")&&!1===e.isTrash&&!1===e.checked;case"Upcoming":return se().includes(e.date)&&!1===e.isTrash&&!1===e.checked;case"Completed":return!0===e.checked&&!1===e.isTrash;case"Trash":return!0===e.isTrash;default:return r&&"Important"===r.innerText?e.type===t&&!1===e.isTrash&&!0===e.isImportant&&!1===e.checked:e.type===t&&!1===e.isTrash&&!1===e.checked}}));return a.sort(((t,r)=>function(t,r){e(2,arguments);var a=n(t),o=n(r),i=a.getTime()-o.getTime();return i<0?-1:i>0?1:i}(new Date(t.date),new Date(r.date)))),a},se=()=>{const t=function(t,r){e(1,arguments);var a=t||{},o=n(a.start),i=n(a.end).getTime();if(!(o.getTime()<=i))throw new RangeError("Invalid interval");var s=[],c=o;c.setHours(0,0,0,0);var d=r&&"step"in r?Number(r.step):1;if(d<1||isNaN(d))throw new RangeError("`options.step` must be a number greater than 1");for(;c.getTime()<=i;)s.push(n(c)),c.setDate(c.getDate()+d),c.setHours(0,0,0,0);return s}({start:ne(new Date,1),end:ne(new Date,7)});return t.forEach(((e,n)=>t.splice(n,1,ee(e,"yyyy-MM-dd")))),t},ce="todolist.projects",de=JSON.parse(localStorage.getItem(ce))||[],ue=()=>{localStorage.setItem(ce,JSON.stringify(de))},le=(e,t)=>{e.isTrash?((e=>{ae.forEach(((t,n)=>{t.type==e.iD&&ae.splice(n,1)}))})(e),de.splice(t,1),he()):(e.isTrash=!0,me(),Ae())},me=()=>{const e=document.querySelector("#projects-list");e.textContent="",de.forEach(((t,n)=>{if(t.iD=n,!1===t.isTrash){const r=Se("header-nav-item",t.title);r.addEventListener("click",(()=>Ne(t,n))),e.append(r)}})),ue()},he=()=>{document.querySelector(".project-container").textContent="",de.forEach(((e,t)=>{e.isTrash&&Me(e,t)})),ue()},fe=document.querySelector(".modal"),ge=document.querySelector(".modal-form");document.querySelector(".modal-form-close").addEventListener("click",(e=>{e.preventDefault(),fe.classList.add("display-none"),ge.removeEventListener("submit",ve),ge.removeEventListener("submit",we),ge.removeEventListener("submit",ye),ge.removeEventListener("submit",be)}));const pe=()=>{Pe("Create New Todo"),ge.addEventListener("submit",ve),fe.classList.remove("display-none")},ve=e=>{const t=document.querySelector(".main-container").getAttribute("data-id"),n=document.querySelector(".modal-form-title-input"),r=document.querySelector(".modal-form-date-input"),a=document.querySelector(".modal-form-prio-input");e.preventDefault(),((e,t,n,r)=>{const a=((e,t,n,r)=>({type:e,checked:!1,title:t,date:n,isImportant:r,isTrash:!1}))(e,t,n,r);ae.push(a),oe()})(t,n.value,r.value,a.checked),fe.classList.add("display-none"),ge.removeEventListener("submit",ve)},we=e=>{const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-date-input"),r=document.querySelector(".modal-form-prio-input");e.preventDefault(),((e,t,n,r)=>{const a=ae[e];a.title=t,a.date=n,a.isImportant=r,oe()})(e.currentTarget.currentIndex,t.value,n.value,r.checked),fe.classList.add("display-none"),ge.removeEventListener("submit",we)},ye=e=>{const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-desc-input");e.preventDefault(),((e,t)=>{const n=((e,t)=>({title:e,desc:t,isTrash:!1}))(e,t);de.push(n),me(),Ne(de[de.length-1],de[de.length-1].iD)})(t.value,n.value),fe.classList.add("display-none"),ge.removeEventListener("submit",ye)},be=e=>{const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-desc-input");e.preventDefault(),((e,t,n)=>{const r=de[e.iD];r.title=t,r.desc=n,me(),Ne(e,e.iD)})(e.currentTarget.currentProject,t.value,n.value),fe.classList.add("display-none"),ge.removeEventListener("submit",be)},Te=e=>{const t=document.createElement("div");return t.classList.add(e),t},qe=e=>{const t=document.createElement("h1");return t.classList.add(e),t},xe=e=>{const t=document.createElement("p");return t.classList.add(e),t},Ce=e=>{const t=document.createElement("button");return t.classList.add(e),t},Se=(e,t)=>{const n=document.createElement("li"),r=document.createElement("a");return n.classList.add(e),r.classList.add(`${e}-link`),r.setAttribute("href","javascript:void(0);"),r.append(je("arrow"),t),n.append(r),n},ke=e=>{const t=document.querySelector(".main-container").getAttribute("data-id"),n=document.querySelector(".todo-container"),r=Te("todo-card"),a=(e=>{const t=document.createElement("input");return t.classList.add("todo-card-input"),t.setAttribute("type","checkbox"),t})(),o=xe("todo-card-title"),i=xe("todo-card-date"),s=Ce("todo-card-edit"),c=Ce("todo-card-delete"),d=Te("todo-btn-container");if(a.checked=e.checked,a.addEventListener("click",(()=>{return t=e.index,n=a.checked,ae[t].checked=n,void setTimeout(oe,2e3);var t,n})),o.innerText=e.title,i.innerText=ee(new Date(e.date),"dd/MM/y"),s.append(je("edit")),s.addEventListener("click",(()=>(e=>{Pe("Edit todo");const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-date-input"),r=document.querySelector(".modal-form-prio-input");t.value=e.title,n.value=e.date,r.checked=e.isImportant,fe.classList.remove("display-none"),ge.addEventListener("submit",we),ge.currentIndex=e.index})(e))),c.append(je("delete")),c.addEventListener("click",(()=>(e=>{e.isTrash?(ae.splice(e.index,1),oe()):(ae[e.index].isTrash=!0,oe())})(e))),d.append(s,c),e.isImportant){const e=xe("todo-card-important");e.innerText="Important",r.append(e)}if(e.isTrash){const t=Ce("todo-card-restore");t.append(je("restore")),t.addEventListener("click",(()=>(e=>{ae[e.index].isTrash=!1,oe()})(e))),d.insertBefore(t,d.lastChild)}if("Today"===t||"Upcoming"===t||"Completed"===t||"Trash"===t){const t=xe("todo-card-type");isNaN(e.type)?t.innerText=e.type:t.innerText=de[parseInt(e.type)].title,r.append(t)}r.append(a,o,i,d),n.append(r)},Me=(e,t)=>{const n=document.querySelector(".project-container"),r=Te("project-card"),a=xe("project-card-title"),o=Ce("project-card-delete"),i=Ce("project-card-restore"),s=Te("project-btn-container");a.innerText=e.title,o.append(je("delete")),o.addEventListener("click",(()=>le(e,t))),i.append(je("restore")),i.addEventListener("click",(()=>(e=>{e.isTrash=!1,he(),me()})(e))),s.append(i,o),r.append(a,s),n.append(r)},De=e=>{const t=document.createElement("legend");return t.classList.add(e),t},Le=e=>{const t=document.createElement("label");return t.classList.add(`${e}-label`),t.setAttribute("for",`${e}-input`),t},Ee=(e,t)=>{const n=document.createElement("input");return n.classList.add(`${e}-input`),n.setAttribute("type",t),n.setAttribute("id",`${e}-input`),n.setAttribute("name",`${e}-input`),n},Pe=e=>{const t=document.querySelector(".modal-form-fieldset"),n=De("modal-form-legend"),r=Le("modal-form-title"),a=Ee("modal-form-title","text"),o=Le("modal-form-date"),i=Ee("modal-form-date","date"),s=Le("modal-form-prio"),c=Ee("modal-form-prio","checkbox");n.innerText=e,r.innerText="Name",o.innerText="Date",s.innerText="Important?",s.append(c),t.textContent="",t.append(n,r,a,o,i,s)},Ue=e=>{const t=document.querySelector(".modal-form-fieldset"),n=De("modal-form-legend"),r=Le("modal-form-title"),a=Ee("modal-form-title","text"),o=Le("modal-form-desc"),i=(e=>{const t=document.createElement("textarea");return t.classList.add(`${e}-input`),t.setAttribute("id",`${e}-input`),t.setAttribute("name",`${e}-input`),t})("modal-form-desc");n.innerText=e,r.innerText="Project Name",o.innerText="Project Description",t.textContent="",t.append(n,r,a,o,i)},je=e=>{const t=document.createElementNS("http://www.w3.org/2000/svg","svg"),n=document.createElementNS("http://www.w3.org/2000/svg","path");switch(t.setAttribute("width","24px"),t.setAttribute("height","24px"),t.setAttribute("preserveAspectRatio","xMidYMid meet"),t.setAttribute("viewBox","0 0 24 24"),n.setAttribute("fill","currentColor"),e){case"delete":n.setAttribute("d","M7 21q-.825 0-1.412-.587Q5 19.825 5 19V6q-.425 0-.713-.287Q4 5.425 4 5t.287-.713Q4.575 4 5 4h4q0-.425.288-.713Q9.575 3 10 3h4q.425 0 .713.287Q15 3.575 15 4h4q.425 0 .712.287Q20 4.575 20 5t-.288.713Q19.425 6 19 6v13q0 .825-.587 1.413Q17.825 21 17 21ZM7 6v13h10V6Zm2 10q0 .425.288.712Q9.575 17 10 17t.713-.288Q11 16.425 11 16V9q0-.425-.287-.713Q10.425 8 10 8t-.712.287Q9 8.575 9 9Zm4 0q0 .425.288.712q.287.288.712.288t.713-.288Q15 16.425 15 16V9q0-.425-.287-.713Q14.425 8 14 8t-.712.287Q13 8.575 13 9ZM7 6v13V6Z");break;case"plus":n.setAttribute("d","M18 12.998h-5v5a1 1 0 0 1-2 0v-5H6a1 1 0 0 1 0-2h5v-5a1 1 0 0 1 2 0v5h5a1 1 0 0 1 0 2z");break;case"edit":n.setAttribute("d","M6 22q-.825 0-1.412-.587Q4 20.825 4 20V4q0-.825.588-1.413Q5.175 2 6 2h7.175q.4 0 .763.15q.362.15.637.425l4.85 4.85q.275.275.425.637q.15.363.15.763V12h-2V9h-4q-.425 0-.712-.288Q13 8.425 13 8V4H6v16h6v2Zm0-2V4v16Zm12.3-5.475l1.075 1.075l-3.875 3.85v1.05h1.05l3.875-3.85l1.05 1.05l-4 4q-.15.15-.338.225q-.187.075-.387.075H14.5q-.2 0-.35-.15q-.15-.15-.15-.35v-2.25q0-.2.075-.387q.075-.188.225-.338Zm3.175 3.175L18.3 14.525l1.45-1.45q.275-.275.7-.275q.425 0 .7.275l1.775 1.775q.275.275.275.7q0 .425-.275.7Z");break;case"restore":n.setAttribute("d","M18 22H6q-.825 0-1.412-.587Q4 20.825 4 20V4q0-.825.588-1.413Q5.175 2 6 2h7.175q.4 0 .763.15q.362.15.637.425l4.85 4.85q.275.275.425.637q.15.363.15.763V20q0 .825-.587 1.413Q18.825 22 18 22Zm0-2V8.85L13.15 4H6v16Zm-6-2.25q1.95 0 3.35-1.4q1.4-1.4 1.4-3.35q0-1.95-1.4-3.35q-1.4-1.4-3.35-1.4q-.95 0-1.775.35t-1.475.95v-.8q0-.325-.212-.538Q8.325 8 8 8q-.325 0-.537.212q-.213.213-.213.538v2.5q0 .425.287.712q.288.288.713.288h2.5q.325 0 .538-.213q.212-.212.212-.537q0-.325-.212-.538q-.213-.212-.538-.212H9.7q.425-.45 1.025-.725q.6-.275 1.275-.275q1.35 0 2.3.95q.95.95.95 2.3q0 1.35-.95 2.3q-.95.95-2.3.95q-.975 0-1.738-.512q-.762-.513-1.187-1.338q-.075-.175-.25-.287Q8.65 14 8.45 14q-.475 0-.712.325q-.238.325-.038.725q.575 1.2 1.725 1.95q1.15.75 2.575.75ZM6 20V4v16Z");break;case"arrow":n.setAttribute("d","M11.7 15.3q-.475.475-1.087.212Q10 15.25 10 14.575v-5.15q0-.675.613-.937q.612-.263 1.087.212l2.6 2.6q.15.15.225.325q.075.175.075.375t-.075.375q-.075.175-.225.325Z")}return t.append(n),t},Ae=()=>{const e=document.querySelector(".header"),t=document.querySelector(".main-container"),n=qe("project-title"),r=xe("project-desc"),a=Te("todo-container"),o=Te("project-controls"),i=Ce("todo-create"),s=Ce("todo-sort");e.classList.remove("is-active"),t.classList.remove("is-active"),t.setAttribute("data-id","General"),n.innerText="General",r.innerText="A general list of todos",i.append(je("plus"),"Create Todo"),i.addEventListener("click",(()=>pe())),s.innerText="All",s.addEventListener("click",(()=>{"All"===s.innerText?s.innerText="Important":s.innerText="All",oe()})),o.append(s,i),t.textContent="",t.append(n,r,o,a),oe()},Ne=(e,t)=>{const n=document.querySelector(".header"),r=document.querySelector(".main-container"),a=qe("project-title"),o=xe("project-desc"),i=Te("project-title-container"),s=Te("todo-container"),c=Te("project-controls"),d=Ce("todo-create"),u=Ce("todo-sort"),l=Ce("project-delete"),m=Ce("project-edit");n.classList.remove("is-active"),r.classList.remove("is-active"),r.setAttribute("data-id",t),a.innerText=e.title,o.innerText=e.desc,d.append(je("plus"),"Create Todo"),d.addEventListener("click",(()=>pe())),u.innerText="All",u.addEventListener("click",(()=>{"All"===u.innerText?u.innerText="Important":u.innerText="All",oe()})),m.append(je("edit")),m.addEventListener("click",(()=>(e=>{Ue("Create New Project");const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-desc-input");t.value=e.title,n.value=e.desc,fe.classList.remove("display-none"),ge.addEventListener("submit",be),ge.currentProject=e})(e))),l.append(je("delete")),l.addEventListener("click",(()=>le(e,t))),c.append(u,d),i.append(a,m,l),r.textContent="",r.append(i,o,c,s),oe()},We=document.querySelector(".header-nav-btn"),Ye=document.querySelectorAll(".header-main-nav-link"),Qe=document.querySelector(".mobile-nav-btn");We.addEventListener("click",(()=>{Ue("Create New Project"),ge.addEventListener("submit",ye),fe.classList.remove("display-none")})),Qe.addEventListener("click",(()=>{document.querySelector(".header").classList.toggle("is-active"),document.querySelector(".main-container").classList.toggle("is-active")})),Ye.forEach((e=>{e.addEventListener("click",(()=>{switch(e.innerText){case"General":Ae();break;case"Today":(()=>{const e=document.querySelector(".header"),t=document.querySelector(".main-container"),n=qe("project-title"),r=xe("project-desc"),a=Te("todo-container");e.classList.remove("is-active"),t.classList.remove("is-active"),t.setAttribute("data-id","Today"),n.innerText="Today",r.innerText="All todos dated today",t.textContent="",t.append(n,r,a),oe()})();break;case"Upcoming":(()=>{const e=document.querySelector(".header"),t=document.querySelector(".main-container"),n=qe("project-title"),r=xe("project-desc"),a=Te("todo-container");e.classList.remove("is-active"),t.classList.remove("is-active"),t.setAttribute("data-id","Upcoming"),n.innerText="Upcoming",r.innerText="All upcoming todos in the next week",t.textContent="",t.append(n,r,a),oe()})();break;case"Completed":(()=>{const e=document.querySelector(".header"),t=document.querySelector(".main-container"),n=qe("project-title"),r=xe("project-desc"),a=Te("todo-container");e.classList.remove("is-active"),t.classList.remove("is-active"),t.setAttribute("data-id","Completed"),n.innerText="Completed",r.innerText="All completed todos",t.textContent="",t.append(n,r,a),oe()})();break;case"Trash":(()=>{const e=document.querySelector(".header"),t=document.querySelector(".main-container"),n=qe("project-title"),r=xe("project-desc"),a=Te("todo-container"),o=Te("project-container"),i=Ce("project-type");e.classList.remove("is-active"),t.classList.remove("is-active"),t.setAttribute("data-id","Trash"),n.innerText="Trash",r.innerText="All deleted todos and projects",i.innerText="Todos",o.classList.add("display-none"),i.addEventListener("click",(()=>{"Todos"===i.innerText?(i.innerText="Projects",document.querySelector(".project-container").classList.remove("display-none"),document.querySelector(".todo-container").classList.add("display-none")):(i.innerText="Todos",document.querySelector(".todo-container").classList.remove("display-none"),document.querySelector(".project-container").classList.add("display-none")),oe(),he()})),t.textContent="",t.append(n,r,i,a,o),oe(),he()})()}}))})),me(),Ae()}},e=>{e(e.s=947)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,