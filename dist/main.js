(()=>{"use strict";const e=[{title:"Project-Title",desc:"Project One"},{title:"Project-Title2",desc:"Project Two"},{title:"Project-Title3",desc:"Project Three"}],t=()=>{const t=document.querySelector("#projects-list");t.textContent="",e.forEach((e=>{const n=ye(".header-nav-item",e.title);n.addEventListener("click",(()=>ke(e))),t.append(n)}))};function n(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function r(e){return n(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function a(e){n(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(e){if(n(1,arguments),!r(e)&&"number"!=typeof e)return!1;var t=a(e);return!isNaN(Number(t))}var i={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function u(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}var s,d={date:u({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:u({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:u({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},c={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function l(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var u=e.defaultWidth,s=a.width?String(a.width):e.defaultWidth;r=e.values[s]||e.values[u]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function m(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,u=o[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(s)?f(s,(function(e){return e.test(u)})):h(s,(function(e){return e.test(u)}));i=e.valueCallback?e.valueCallback(d):d,i=n.valueCallback?n.valueCallback(i):i;var c=t.slice(u.length);return{value:i,rest:c}}}function h(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function f(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const g={code:"en-US",formatDistance:function(e,t,n){var r,a=i[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:d,formatRelative:function(e,t,n,r){return c[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:l({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:l({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:l({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:l({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:l({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(s={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(s.matchPattern);if(!n)return null;var r=n[0],a=e.match(s.parsePattern);if(!a)return null;var o=s.valueCallback?s.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(r.length);return{value:o,rest:i}}),era:m({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:m({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:m({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:m({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:m({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function w(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function v(e,t){n(2,arguments);var r=a(e).getTime(),o=w(t);return new Date(r+o)}function p(e,t){n(2,arguments);var r=w(t);return v(e,-r)}var y=864e5;function b(e){n(1,arguments);var t=1,r=a(e),o=r.getUTCDay(),i=(o<t?7:0)+o-t;return r.setUTCDate(r.getUTCDate()-i),r.setUTCHours(0,0,0,0),r}function T(e){n(1,arguments);var t=a(e),r=t.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(r+1,0,4),o.setUTCHours(0,0,0,0);var i=b(o),u=new Date(0);u.setUTCFullYear(r,0,4),u.setUTCHours(0,0,0,0);var s=b(u);return t.getTime()>=i.getTime()?r+1:t.getTime()>=s.getTime()?r:r-1}function x(e){n(1,arguments);var t=T(e),r=new Date(0);r.setUTCFullYear(t,0,4),r.setUTCHours(0,0,0,0);var a=b(r);return a}var C=6048e5;function M(e,t){n(1,arguments);var r=t||{},o=r.locale,i=o&&o.options&&o.options.weekStartsOn,u=null==i?0:w(i),s=null==r.weekStartsOn?u:w(r.weekStartsOn);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=a(e),c=d.getUTCDay(),l=(c<s?7:0)+c-s;return d.setUTCDate(d.getUTCDate()-l),d.setUTCHours(0,0,0,0),d}function D(e,t){n(1,arguments);var r=a(e),o=r.getUTCFullYear(),i=t||{},u=i.locale,s=u&&u.options&&u.options.firstWeekContainsDate,d=null==s?1:w(s),c=null==i.firstWeekContainsDate?d:w(i.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(o+1,0,c),l.setUTCHours(0,0,0,0);var m=M(l,t),h=new Date(0);h.setUTCFullYear(o,0,c),h.setUTCHours(0,0,0,0);var f=M(h,t);return r.getTime()>=m.getTime()?o+1:r.getTime()>=f.getTime()?o:o-1}function k(e,t){n(1,arguments);var r=t||{},a=r.locale,o=a&&a.options&&a.options.firstWeekContainsDate,i=null==o?1:w(o),u=null==r.firstWeekContainsDate?i:w(r.firstWeekContainsDate),s=D(e,t),d=new Date(0);d.setUTCFullYear(s,0,u),d.setUTCHours(0,0,0,0);var c=M(d,t);return c}var S=6048e5;function E(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const P=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return E("yy"===t?r%100:r,t.length)},U=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):E(n+1,2)},L=function(e,t){return E(e.getUTCDate(),t.length)},q=function(e,t){return E(e.getUTCHours()%12||12,t.length)},W=function(e,t){return E(e.getUTCHours(),t.length)},j=function(e,t){return E(e.getUTCMinutes(),t.length)},N=function(e,t){return E(e.getUTCSeconds(),t.length)},Y=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return E(Math.floor(r*Math.pow(10,n-3)),t.length)};function O(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+E(o,2)}function A(e,t){return e%60==0?(e>0?"-":"+")+E(Math.abs(e)/60,2):H(e,t)}function H(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+E(Math.floor(a/60),2)+n+E(a%60,2)}const F={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return P(e,t)},Y:function(e,t,n,r){var a=D(e,r),o=a>0?a:1-a;return"YY"===t?E(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):E(o,t.length)},R:function(e,t){return E(T(e),t.length)},u:function(e,t){return E(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return E(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return E(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return U(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return E(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,r,o){var i=function(e,t){n(1,arguments);var r=a(e),o=M(r,t).getTime()-k(r,t).getTime();return Math.round(o/S)+1}(e,o);return"wo"===t?r.ordinalNumber(i,{unit:"week"}):E(i,t.length)},I:function(e,t,r){var o=function(e){n(1,arguments);var t=a(e),r=b(t).getTime()-x(t).getTime();return Math.round(r/C)+1}(e);return"Io"===t?r.ordinalNumber(o,{unit:"week"}):E(o,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):L(e,t)},D:function(e,t,r){var o=function(e){n(1,arguments);var t=a(e),r=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var o=t.getTime(),i=r-o;return Math.floor(i/y)+1}(e);return"Do"===t?r.ordinalNumber(o,{unit:"dayOfYear"}):E(o,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return E(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return E(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return E(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return q(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):W(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):E(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):E(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):j(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):N(e,t)},S:function(e,t){return Y(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return A(a);case"XXXX":case"XX":return H(a);default:return H(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return A(a);case"xxxx":case"xx":return H(a);default:return H(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+O(a,":");default:return"GMT"+H(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+O(a,":");default:return"GMT"+H(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return E(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return E((r._originalDate||e).getTime(),t.length)}};function G(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function z(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var Q={p:z,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return G(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",G(a,t)).replace("{{time}}",z(o,t))}};const X=Q;function B(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var R=["D","DD"],$=["YY","YYYY"];function I(e){return-1!==R.indexOf(e)}function J(e){return-1!==$.indexOf(e)}function _(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var V=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,K=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Z=/^'([^]*?)'?$/,ee=/''/g,te=/[a-zA-Z]/;function ne(e,t,r){n(2,arguments);var i=String(t),u=r||{},s=u.locale||g,d=s.options&&s.options.firstWeekContainsDate,c=null==d?1:w(d),l=null==u.firstWeekContainsDate?c:w(u.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=s.options&&s.options.weekStartsOn,h=null==m?0:w(m),f=null==u.weekStartsOn?h:w(u.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!s.localize)throw new RangeError("locale must contain localize property");if(!s.formatLong)throw new RangeError("locale must contain formatLong property");var v=a(e);if(!o(v))throw new RangeError("Invalid time value");var y=B(v),b=p(v,y),T={firstWeekContainsDate:l,weekStartsOn:f,locale:s,_originalDate:v},x=i.match(K).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,X[t])(e,s.formatLong,T):e})).join("").match(V).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return re(n);var a=F[r];if(a)return!u.useAdditionalWeekYearTokens&&J(n)&&_(n,t,e),!u.useAdditionalDayOfYearTokens&&I(n)&&_(n,t,e),a(b,n,s.localize,T);if(r.match(te))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return x}function re(e){return e.match(Z)[1].replace(ee,"'")}function ae(e,t){n(2,arguments);var r=a(e),o=w(t);return isNaN(o)?new Date(NaN):o?(r.setDate(r.getDate()+o),r):r}function oe(e,t){n(2,arguments);var r=a(e),o=a(t),i=r.getTime()-o.getTime();return i<0?-1:i>0?1:i}const ie=[{type:"General",checked:!1,title:"Todo-Title",date:"2022-07-20",isTrash:!1},{type:"General",checked:!1,title:"Todo-Title2",date:"2022-07-21",isTrash:!1},{type:"Project-Title",checked:!1,title:"Todo-Title3",date:"2022-07-22",isTrash:!1},{type:"General",checked:!1,title:"Todo-Title4",date:"2022-07-22",isTrash:!1},{type:"General",checked:!1,title:"Trash-Todo",date:"2022-07-22",isTrash:!0}],ue=()=>{const e=document.querySelector(".project-title"),t=document.querySelector(".todo-container"),n=se(e.innerText);t.textContent="",n.forEach((e=>be(e)))},se=e=>{if("Today"===e)return ie.filter(((e,t)=>(e.index=t,e.date===ne(new Date,"yyyy-MM-dd")&&!1===e.isTrash)));if("Upcoming"===e){const e=function(e,t){n(1,arguments);var r=e||{},o=a(r.start),i=a(r.end).getTime();if(!(o.getTime()<=i))throw new RangeError("Invalid interval");var u=[],s=o;s.setHours(0,0,0,0);var d=t&&"step"in t?Number(t.step):1;if(d<1||isNaN(d))throw new RangeError("`options.step` must be a number greater than 1");for(;s.getTime()<=i;)u.push(a(s)),s.setDate(s.getDate()+d),s.setHours(0,0,0,0);return u}({start:ae(new Date,1),end:ae(new Date,7)});return e.forEach(((t,n)=>e.splice(n,1,ne(t,"yyyy-MM-dd")))),ie.filter(((t,n)=>(t.index=n,e.includes(t.date)&&!1===t.isTrash)))}if("Trash"===e){const e=ie.filter(((e,t)=>(e.index=t,!0===e.isTrash)));return e.sort(((e,t)=>oe(new Date(e.date),new Date(t.date)))),e}{const t=ie.filter(((t,n)=>(t.index=n,t.type===e&&!1===t.isTrash)));return t.sort(((e,t)=>oe(new Date(e.date),new Date(t.date)))),t}},de=document.querySelector(".modal"),ce=document.querySelector(".modal-form");document.querySelector(".modal-form-close").addEventListener("click",(()=>{de.classList.add("display-none"),ce.removeEventListener("submit",me),ce.removeEventListener("submit",he),ce.removeEventListener("submit",fe)}));const le=()=>{Me("Add new todo"),ce.addEventListener("submit",me),de.classList.remove("display-none")},me=e=>{const t=document.querySelector(".project-title"),n=document.querySelector(".modal-form-title-input"),r=document.querySelector(".modal-form-date-input");e.preventDefault(),((e,t,n)=>{const r=((e,t,n)=>({type:e,checked:!1,title:t,date:n,isTrash:!1}))(e,t,n);ie.push(r),ue()})(t.innerText,n.value,r.value),de.classList.add("display-none"),ce.removeEventListener("submit",me)},he=e=>{const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-date-input");e.preventDefault(),((e,t,n)=>{const r=ie[e];console.log(r),r.title=t,r.date=n,ue()})(e.currentTarget.currentIndex,t.value,n.value),de.classList.add("display-none"),ce.removeEventListener("submit",he)},fe=n=>{const r=document.querySelector(".modal-form-title-input"),a=document.querySelector(".modal-form-desc-input");n.preventDefault(),((n,r)=>{const a=((e,t)=>({title:e,desc:t}))(n,r);e.push(a),t()})(r.value,a.value),de.classList.add("display-none"),ce.removeEventListener("submit",fe)},ge=e=>{const t=document.createElement("div");return t.classList.add(e),t},we=e=>{const t=document.createElement("h2");return t.classList.add(e),t},ve=e=>{const t=document.createElement("p");return t.classList.add(e),t},pe=e=>{const t=document.createElement("button");return t.classList.add(e),t},ye=(e,t)=>{const n=document.createElement("li"),r=document.createElement("a");return n.classList.add(e),r.classList.add(`${e}-link`),r.setAttribute("href","#"),r.innerText=t,n.append(r),n},be=e=>{const t=document.querySelector(".todo-container"),n=ge("todo-card"),r=(e=>{const t=document.createElement("input");return t.classList.add("todo-card-input"),t.setAttribute("type","checkbox"),t})(),a=ve("todo-card-title"),o=ve("todo-card-date"),i=pe("todo-card-edit"),u=pe("todo-card-delete");if(r.checked=e.checked,r.addEventListener("click",(()=>{return t=e.index,n=r.checked,ie[t].checked=n,void console.log(ie);var t,n})),a.innerText=e.title,o.innerText=e.date,i.innerText="Edit",i.addEventListener("click",(()=>(e=>{Me("Edit todo");const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-date-input");t.value=e.title,n.value=e.date,de.classList.remove("display-none"),ce.addEventListener("submit",he),ce.currentIndex=e.index})(e))),u.innerText="X",u.addEventListener("click",(()=>(e=>{e.isTrash?(ie.splice(e.index,1),console.log(ie),ue()):(ie[e.index].isTrash=!0,console.log(ie),ue())})(e))),n.append(r,a,o,i,u),e.isTrash){const t=pe("todo-card-restore");t.innerText="+",t.addEventListener("click",(()=>(e=>{ie[e.index].isTrash=!1,console.log(ie),ue()})(e))),n.insertBefore(t,n.lastChild)}t.append(n)},Te=e=>{const t=document.createElement("legend");return t.classList.add(e),t},xe=e=>{const t=document.createElement("label");return t.classList.add(`${e}-label`),t.setAttribute("for",`${e}-input`),t},Ce=(e,t)=>{const n=document.createElement("input");return n.classList.add(`${e}-input`),n.setAttribute("type",t),n.setAttribute("id",`${e}-input`),n.setAttribute("name",`${e}-input`),n},Me=e=>{const t=document.querySelector(".modal-form-fieldset"),n=Te("modal-form-legend"),r=xe("modal-form-title"),a=Ce("modal-form-title","text"),o=xe("modal-form-date"),i=Ce("modal-form-date","date");n.innerText=e,r.innerText="Name",o.innerText="Date",t.textContent="",t.append(n,r,a,o,i)},De=()=>{const e=document.querySelector(".main"),t=ge("main-container"),n=we("project-title"),r=ve("project-desc"),a=ge("todo-container"),o=pe("todo-create");n.innerText="General",r.innerText="A general list of random todos.",o.innerText="+",o.addEventListener("click",(()=>le())),t.append(n,r,a,o),e.textContent="",e.append(t),ue()},ke=e=>{const t=document.querySelector(".main"),n=ge("main-container"),r=we("project-title"),a=ve("project-desc"),o=ge("todo-container"),i=pe("todo-create");r.innerText=e.title,a.innerText=e.desc,i.innerText="+",i.addEventListener("click",(()=>le())),n.append(r,a,o,i),t.textContent="",t.append(n),ue()},Se=document.querySelector(".header-nav-btn"),Ee=document.querySelectorAll(".header-main-nav-link");Se.addEventListener("click",(()=>{(e=>{const t=document.querySelector(".modal-form-fieldset"),n=Te("modal-form-legend"),r=xe("modal-form-title"),a=Ce("modal-form-title","text"),o=xe("modal-form-desc"),i=(e=>{const t=document.createElement("textarea");return t.classList.add(`${e}-input`),t.setAttribute("id",`${e}-input`),t.setAttribute("name",`${e}-input`),t})("modal-form-desc");n.innerText=e,r.innerText="Project Name",o.innerText="Project Description",t.textContent="",t.append(n,r,a,o,i)})("Create new Project"),ce.addEventListener("submit",fe),de.classList.remove("display-none")})),Ee.forEach((e=>{e.addEventListener("click",(()=>{switch(e.innerText){case"General":De();break;case"Today":(()=>{const e=document.querySelector(".main"),t=ge("main-container"),n=we("project-title"),r=ve("project-desc"),a=ge("todo-container");n.innerText="Today",r.innerText="All todos dated today",t.append(n,r,a),e.textContent="",e.append(t),ue()})();break;case"Upcoming":(()=>{const e=document.querySelector(".main"),t=ge("main-container"),n=we("project-title"),r=ve("project-desc"),a=ge("todo-container");n.innerText="Upcoming",r.innerText="All upcoming todos in the next week",t.append(n,r,a),e.textContent="",e.append(t),ue()})();break;case"Trash":(()=>{const e=document.querySelector(".main"),t=ge("main-container"),n=we("project-title"),r=ve("project-desc"),a=ge("todo-container");n.innerText="Trash",r.innerText="All deleted todos",t.append(n,r,a),e.textContent="",e.append(t),ue()})()}}))})),t(),De()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,