(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){return e(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function n(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function r(r){if(e(1,arguments),!t(r)&&"number"!=typeof r)return!1;var a=n(r);return!isNaN(Number(a))}var a={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function i(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}var o,u={date:i({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:i({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:i({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},s={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function c(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,o=a.width?String(a.width):i;r=e.formattingValues[o]||e.formattingValues[i]}else{var u=e.defaultWidth,s=a.width?String(a.width):e.defaultWidth;r=e.values[s]||e.values[u]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function d(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=t.match(a);if(!i)return null;var o,u=i[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?m(s,(function(e){return e.test(u)})):l(s,(function(e){return e.test(u)}));o=e.valueCallback?e.valueCallback(c):c,o=n.valueCallback?n.valueCallback(o):o;var d=t.slice(u.length);return{value:o,rest:d}}}function l(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function m(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const h={code:"en-US",formatDistance:function(e,t,n){var r,i=a[e];return r="string"==typeof i?i:1===t?i.one:i.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:u,formatRelative:function(e,t,n,r){return s[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:c({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:c({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:c({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:c({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:c({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(o={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(o.matchPattern);if(!n)return null;var r=n[0],a=e.match(o.parsePattern);if(!a)return null;var i=o.valueCallback?o.valueCallback(a[0]):a[0];i=t.valueCallback?t.valueCallback(i):i;var u=e.slice(r.length);return{value:i,rest:u}}),era:d({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:d({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:d({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:d({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:d({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function f(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function g(t,r){e(2,arguments);var a=n(t).getTime(),i=f(r);return new Date(a+i)}function p(t,n){e(2,arguments);var r=f(n);return g(t,-r)}var w=864e5;function v(t){e(1,arguments);var r=1,a=n(t),i=a.getUTCDay(),o=(i<r?7:0)+i-r;return a.setUTCDate(a.getUTCDate()-o),a.setUTCHours(0,0,0,0),a}function y(t){e(1,arguments);var r=n(t),a=r.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(a+1,0,4),i.setUTCHours(0,0,0,0);var o=v(i),u=new Date(0);u.setUTCFullYear(a,0,4),u.setUTCHours(0,0,0,0);var s=v(u);return r.getTime()>=o.getTime()?a+1:r.getTime()>=s.getTime()?a:a-1}function b(t){e(1,arguments);var n=y(t),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var a=v(r);return a}var T=6048e5;function x(t,r){e(1,arguments);var a=r||{},i=a.locale,o=i&&i.options&&i.options.weekStartsOn,u=null==o?0:f(o),s=null==a.weekStartsOn?u:f(a.weekStartsOn);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=n(t),d=c.getUTCDay(),l=(d<s?7:0)+d-s;return c.setUTCDate(c.getUTCDate()-l),c.setUTCHours(0,0,0,0),c}function C(t,r){e(1,arguments);var a=n(t),i=a.getUTCFullYear(),o=r||{},u=o.locale,s=u&&u.options&&u.options.firstWeekContainsDate,c=null==s?1:f(s),d=null==o.firstWeekContainsDate?c:f(o.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(i+1,0,d),l.setUTCHours(0,0,0,0);var m=x(l,r),h=new Date(0);h.setUTCFullYear(i,0,d),h.setUTCHours(0,0,0,0);var g=x(h,r);return a.getTime()>=m.getTime()?i+1:a.getTime()>=g.getTime()?i:i-1}function M(t,n){e(1,arguments);var r=n||{},a=r.locale,i=a&&a.options&&a.options.firstWeekContainsDate,o=null==i?1:f(i),u=null==r.firstWeekContainsDate?o:f(r.firstWeekContainsDate),s=C(t,n),c=new Date(0);c.setUTCFullYear(s,0,u),c.setUTCHours(0,0,0,0);var d=x(c,n);return d}var k=6048e5;function D(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const S=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return D("yy"===t?r%100:r,t.length)},E=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):D(n+1,2)},P=function(e,t){return D(e.getUTCDate(),t.length)},U=function(e,t){return D(e.getUTCHours()%12||12,t.length)},L=function(e,t){return D(e.getUTCHours(),t.length)},q=function(e,t){return D(e.getUTCMinutes(),t.length)},j=function(e,t){return D(e.getUTCSeconds(),t.length)},A=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return D(Math.floor(r*Math.pow(10,n-3)),t.length)};function W(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),i=r%60;if(0===i)return n+String(a);var o=t||"";return n+String(a)+o+D(i,2)}function N(e,t){return e%60==0?(e>0?"-":"+")+D(Math.abs(e)/60,2):Y(e,t)}function Y(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+D(Math.floor(a/60),2)+n+D(a%60,2)}const H={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return S(e,t)},Y:function(e,t,n,r){var a=C(e,r),i=a>0?a:1-a;return"YY"===t?D(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):D(i,t.length)},R:function(e,t){return D(y(e),t.length)},u:function(e,t){return D(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return D(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return D(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return E(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return D(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,r,a,i){var o=function(t,r){e(1,arguments);var a=n(t),i=x(a,r).getTime()-M(a,r).getTime();return Math.round(i/k)+1}(t,i);return"wo"===r?a.ordinalNumber(o,{unit:"week"}):D(o,r.length)},I:function(t,r,a){var i=function(t){e(1,arguments);var r=n(t),a=v(r).getTime()-b(r).getTime();return Math.round(a/T)+1}(t);return"Io"===r?a.ordinalNumber(i,{unit:"week"}):D(i,r.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):P(e,t)},D:function(t,r,a){var i=function(t){e(1,arguments);var r=n(t),a=r.getTime();r.setUTCMonth(0,1),r.setUTCHours(0,0,0,0);var i=r.getTime(),o=a-i;return Math.floor(o/w)+1}(t);return"Do"===r?a.ordinalNumber(i,{unit:"dayOfYear"}):D(i,r.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return D(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return D(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return D(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return U(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):L(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):D(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):D(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):q(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):j(e,t)},S:function(e,t){return A(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return N(a);case"XXXX":case"XX":return Y(a);default:return Y(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return N(a);case"xxxx":case"xx":return Y(a);default:return Y(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+W(a,":");default:return"GMT"+Y(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+W(a,":");default:return"GMT"+Y(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return D(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return D((r._originalDate||e).getTime(),t.length)}};function O(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function z(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var F={p:z,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return O(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",O(a,t)).replace("{{time}}",z(i,t))}};const G=F;function Q(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var B=["D","DD"],R=["YY","YYYY"];function X(e){return-1!==B.indexOf(e)}function $(e){return-1!==R.indexOf(e)}function I(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var V=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,J=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,_=/^'([^]*?)'?$/,K=/''/g,Z=/[a-zA-Z]/;function ee(t,a,i){e(2,arguments);var o=String(a),u=i||{},s=u.locale||h,c=s.options&&s.options.firstWeekContainsDate,d=null==c?1:f(c),l=null==u.firstWeekContainsDate?d:f(u.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=s.options&&s.options.weekStartsOn,g=null==m?0:f(m),w=null==u.weekStartsOn?g:f(u.weekStartsOn);if(!(w>=0&&w<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!s.localize)throw new RangeError("locale must contain localize property");if(!s.formatLong)throw new RangeError("locale must contain formatLong property");var v=n(t);if(!r(v))throw new RangeError("Invalid time value");var y=Q(v),b=p(v,y),T={firstWeekContainsDate:l,weekStartsOn:w,locale:s,_originalDate:v},x=o.match(J).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,G[t])(e,s.formatLong,T):e})).join("").match(V).map((function(e){if("''"===e)return"'";var n=e[0];if("'"===n)return te(e);var r=H[n];if(r)return!u.useAdditionalWeekYearTokens&&$(e)&&I(e,a,t),!u.useAdditionalDayOfYearTokens&&X(e)&&I(e,a,t),r(b,e,s.localize,T);if(n.match(Z))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");return e})).join("");return x}function te(e){return e.match(_)[1].replace(K,"'")}function ne(t,r){e(2,arguments);var a=n(t),i=f(r);return isNaN(i)?new Date(NaN):i?(a.setDate(a.getDate()+i),a):a}const re=[{type:"General",checked:!1,title:"Todo-Title",date:"2022-07-20",isTrash:!1},{type:"General",checked:!1,title:"Todo-Title2",date:"2022-07-21",isTrash:!1},{type:"0",checked:!1,title:"Todo-Title3",date:"2022-07-22",isTrash:!1},{type:"General",checked:!1,title:"Todo-Title4",date:"2022-07-22",isTrash:!1},{type:"General",checked:!1,title:"Trash-Todo",date:"2022-07-22",isTrash:!0}],ae=()=>{const e=document.querySelector(".main-container").getAttribute("data-id"),t=document.querySelector(".todo-container"),n=ie(e);t.textContent="",n.forEach((e=>xe(e)))},ie=t=>{const r=re.filter(((e,n)=>{switch(e.index=n,t){case"Today":return e.date===ee(new Date,"yyyy-MM-dd")&&!1===e.isTrash;case"Upcoming":return oe().includes(e.date)&&!1===e.isTrash;case"Trash":return!0===e.isTrash;default:return e.type===t&&!1===e.isTrash}}));return r.sort(((t,r)=>function(t,r){e(2,arguments);var a=n(t),i=n(r),o=a.getTime()-i.getTime();return o<0?-1:o>0?1:o}(new Date(t.date),new Date(r.date)))),r},oe=()=>{const t=function(t,r){e(1,arguments);var a=t||{},i=n(a.start),o=n(a.end).getTime();if(!(i.getTime()<=o))throw new RangeError("Invalid interval");var u=[],s=i;s.setHours(0,0,0,0);var c=r&&"step"in r?Number(r.step):1;if(c<1||isNaN(c))throw new RangeError("`options.step` must be a number greater than 1");for(;s.getTime()<=o;)u.push(n(s)),s.setDate(s.getDate()+c),s.setHours(0,0,0,0);return u}({start:ne(new Date,1),end:ne(new Date,7)});return t.forEach(((e,n)=>t.splice(n,1,ee(e,"yyyy-MM-dd")))),t},ue=[{title:"Project-Title",desc:"Project One",isTrash:!1},{title:"Project-Title2",desc:"Project Two",isTrash:!0},{title:"Project-Title3",desc:"Project Three",isTrash:!1}],se=(e,t)=>{e.isTrash?((e=>{re.forEach(((t,n)=>{t.type==e.iD&&re.splice(n,1)}))})(e),ue.splice(t,1),de()):(e.isTrash=!0,Pe()),ce()},ce=()=>{const e=document.querySelector("#projects-list");e.textContent="",ue.forEach(((t,n)=>{if(t.iD=n,!1===t.isTrash){const r=Te(".header-nav-item",t.title);r.addEventListener("click",(()=>Ue(t,n))),e.append(r)}}))},de=()=>{document.querySelector(".project-container").textContent="",ue.forEach(((e,t)=>{e.isTrash&&Ce(e,t)}))},le=document.querySelector(".modal"),me=document.querySelector(".modal-form");document.querySelector(".modal-form-close").addEventListener("click",(()=>{le.classList.add("display-none"),me.removeEventListener("submit",fe),me.removeEventListener("submit",ge),me.removeEventListener("submit",pe)}));const he=()=>{Se("Add new todo"),me.addEventListener("submit",fe),le.classList.remove("display-none")},fe=e=>{const t=document.querySelector(".main-container").getAttribute("data-id"),n=document.querySelector(".modal-form-title-input"),r=document.querySelector(".modal-form-date-input"),a=document.querySelector(".modal-form-prio-input");e.preventDefault(),((e,t,n,r)=>{const a=((e,t,n,r)=>({type:e,checked:!1,title:t,date:n,prio:r,isTrash:!1}))(e,t,n,r);re.push(a),ae()})(t,n.value,r.value,a.checked),le.classList.add("display-none"),me.removeEventListener("submit",fe)},ge=e=>{const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-date-input"),r=document.querySelector(".modal-form-prio-input");e.preventDefault(),((e,t,n,r)=>{const a=re[e];a.title=t,a.date=n,a.prio=r,ae()})(e.currentTarget.currentIndex,t.value,n.value,r.checked),le.classList.add("display-none"),me.removeEventListener("submit",ge)},pe=e=>{const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-desc-input");e.preventDefault(),((e,t)=>{const n=((e,t)=>({title:e,desc:t,isTrash:!1}))(e,t);ue.push(n),ce()})(t.value,n.value),le.classList.add("display-none"),me.removeEventListener("submit",pe)},we=e=>{const t=document.createElement("div");return t.classList.add(e),t},ve=e=>{const t=document.createElement("h2");return t.classList.add(e),t},ye=e=>{const t=document.createElement("p");return t.classList.add(e),t},be=e=>{const t=document.createElement("button");return t.classList.add(e),t},Te=(e,t)=>{const n=document.createElement("li"),r=document.createElement("a");return n.classList.add(e),r.classList.add(`${e}-link`),r.setAttribute("href","#"),r.innerText=t,n.append(r),n},xe=e=>{const t=document.querySelector(".todo-container"),n=we("todo-card"),r=(e=>{const t=document.createElement("input");return t.classList.add("todo-card-input"),t.setAttribute("type","checkbox"),t})(),a=ye("todo-card-title"),i=ye("todo-card-date"),o=be("todo-card-edit"),u=be("todo-card-delete");if(r.checked=e.checked,r.addEventListener("click",(()=>{return t=e.index,n=r.checked,void(re[t].checked=n);var t,n})),a.innerText=e.title,i.innerText=ee(new Date(e.date),"dd/MM/y"),o.append(Ee("edit")),o.addEventListener("click",(()=>(e=>{Se("Edit todo");const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-date-input"),r=document.querySelector(".modal-form-prio-input");t.value=e.title,n.value=e.date,r.checked=e.prio,le.classList.remove("display-none"),me.addEventListener("submit",ge),me.currentIndex=e.index})(e))),u.append(Ee("delete")),u.addEventListener("click",(()=>(e=>{e.isTrash?(re.splice(e.index,1),ae()):(re[e.index].isTrash=!0,ae())})(e))),n.append(r,a,i,o,u),e.isTrash){const t=be("todo-card-restore");t.append(Ee("restore")),t.addEventListener("click",(()=>(e=>{re[e.index].isTrash=!1,ae()})(e))),n.insertBefore(t,n.lastChild)}t.append(n)},Ce=(e,t)=>{const n=document.querySelector(".project-container"),r=we("project-card"),a=ye("project-card-title"),i=be("project-card-delete"),o=be("project-card-restore");a.innerText=e.title,i.append(Ee("delete")),i.addEventListener("click",(()=>se(e,t))),o.append(Ee("restore")),o.addEventListener("click",(()=>(e=>{e.isTrash=!1,de(),ce()})(e))),r.append(a,o,i),n.append(r)},Me=e=>{const t=document.createElement("legend");return t.classList.add(e),t},ke=e=>{const t=document.createElement("label");return t.classList.add(`${e}-label`),t.setAttribute("for",`${e}-input`),t},De=(e,t)=>{const n=document.createElement("input");return n.classList.add(`${e}-input`),n.setAttribute("type",t),n.setAttribute("id",`${e}-input`),n.setAttribute("name",`${e}-input`),n},Se=e=>{const t=document.querySelector(".modal-form-fieldset"),n=Me("modal-form-legend"),r=ke("modal-form-title"),a=De("modal-form-title","text"),i=ke("modal-form-date"),o=De("modal-form-date","date"),u=ke("modal-form-prio"),s=De("modal-form-prio","checkbox");n.innerText=e,r.innerText="Name",i.innerText="Date",u.innerText="Important?",t.textContent="",t.append(n,r,a,i,o,u,s)},Ee=e=>{const t=document.createElementNS("http://www.w3.org/2000/svg","svg"),n=document.createElementNS("http://www.w3.org/2000/svg","path");switch(t.setAttribute("width","24px"),t.setAttribute("height","24px"),t.setAttribute("preserveAspectRatio","xMidYMid meet"),t.setAttribute("viewBox","0 0 24 24"),n.setAttribute("fill","currentColor"),e){case"delete":n.setAttribute("d","M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z");break;case"plus":n.setAttribute("d","M18 12.998h-5v5a1 1 0 0 1-2 0v-5H6a1 1 0 0 1 0-2h5v-5a1 1 0 0 1 2 0v5h5a1 1 0 0 1 0 2z");break;case"edit":n.setAttribute("d","M12 22H5a2 2 0 0 1-2-2l.01-14c0-1.1.88-2 1.99-2h1V3c0-.55.45-1 1-1s1 .45 1 1v1h8V3c0-.55.45-1 1-1s1 .45 1 1v1h1c1.1 0 2 .9 2 2v6h-2v-2H5v10h7v2zm10.13-5.01l.71-.71a.996.996 0 0 0 0-1.41l-.71-.71a.996.996 0 0 0-1.41 0l-.71.71l2.12 2.12zm-.71.71l-5.01 5.01c-.18.18-.44.29-.7.29H14.5c-.28 0-.5-.22-.5-.5v-1.21c0-.27.11-.52.29-.71l5.01-5.01l2.12 2.13z");break;case"restore":n.setAttribute("d","m19.41 7.41l-4.83-4.83c-.37-.37-.88-.58-1.41-.58H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8.83c0-.53-.21-1.04-.59-1.42zM12 18c-1.65 0-3.19-.81-4.12-2.17a.75.75 0 0 1 .19-1.04c.34-.24.81-.15 1.04.19c.65.95 1.73 1.52 2.88 1.52c1.93 0 3.5-1.57 3.5-3.5a3.495 3.495 0 0 0-6.6-1.61L10.5 13H7c-.28 0-.5-.22-.5-.5V9l1.3 1.3A4.98 4.98 0 0 1 12 8c2.76 0 5 2.24 5 5s-2.24 5-5 5z")}return t.append(n),t},Pe=()=>{const e=document.querySelector(".main-container"),t=ve("project-title"),n=ye("project-desc"),r=we("todo-container"),a=be("todo-create");e.setAttribute("data-id","General"),t.innerText="General",n.innerText="A general list of random todos.",a.append(Ee("plus")),a.addEventListener("click",(()=>he())),e.textContent="",e.append(t,n,r,a),ae()},Ue=(e,t)=>{const n=document.querySelector(".main-container"),r=ve("project-title"),a=ye("project-desc"),i=we("todo-container"),o=be("todo-create"),u=be("project-delete");n.setAttribute("data-id",t),r.innerText=e.title,a.innerText=e.desc,o.append(Ee("plus")),o.addEventListener("click",(()=>he())),u.append(Ee("delete")),u.addEventListener("click",(()=>se(e,t))),n.textContent="",n.append(r,a,i,o,u),ae()},Le=document.querySelector(".header-nav-btn"),qe=document.querySelectorAll(".header-main-nav-link");Le.addEventListener("click",(()=>{(e=>{const t=document.querySelector(".modal-form-fieldset"),n=Me("modal-form-legend"),r=ke("modal-form-title"),a=De("modal-form-title","text"),i=ke("modal-form-desc"),o=(e=>{const t=document.createElement("textarea");return t.classList.add(`${e}-input`),t.setAttribute("id",`${e}-input`),t.setAttribute("name",`${e}-input`),t})("modal-form-desc");n.innerText=e,r.innerText="Project Name",i.innerText="Project Description",t.textContent="",t.append(n,r,a,i,o)})("Create new Project"),me.addEventListener("submit",pe),le.classList.remove("display-none")})),qe.forEach((e=>{e.addEventListener("click",(()=>{switch(e.innerText){case"General":Pe();break;case"Today":(()=>{const e=document.querySelector(".main-container"),t=ve("project-title"),n=ye("project-desc"),r=we("todo-container");e.setAttribute("data-id","Today"),t.innerText="Today",n.innerText="All todos dated today",e.textContent="",e.append(t,n,r),ae()})();break;case"Upcoming":(()=>{const e=document.querySelector(".main-container"),t=ve("project-title"),n=ye("project-desc"),r=we("todo-container");e.setAttribute("data-id","Upcoming"),t.innerText="Upcoming",n.innerText="All upcoming todos in the next week",e.textContent="",e.append(t,n,r),ae()})();break;case"Trash":(()=>{const e=document.querySelector(".main-container"),t=ve("project-title"),n=ye("project-desc"),r=we("todo-container"),a=we("project-container");e.setAttribute("data-id","Trash"),t.innerText="Trash",n.innerText="All deleted todos and projects",a.innerText="Test",e.textContent="",e.append(t,n,r,a),ae(),de()})()}}))})),ce(),Pe()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,